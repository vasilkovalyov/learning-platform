// .font-face('Roboto', 'Roboto-Light', 300, normal)
@mixin font-face($font-name, $font-path, $weight, $style) {
  @font-face {
    font-family: $font-name;
    src: url('/fonts/${font-path}.woff2') format('woff2'), url('/fonts/${font-path}.woff') format('woff');
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
  }
}

.listreset {
  margin: 0;
  padding: 0;
  list-style: none;
}

// transition
.transition {
  transition: all 0.3s ease-in-out;
}

.bgCover {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}

.fillCover {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.absoluteCover {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.centeredAbsolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.alignVerticalAbsolute {
  position: absolute;
  top: 0;
  bottom: 0;
  margin: auto;
}

.alignHorizontalAbsolute {
  position: absolute;
  left: 0;
  bottom: 0;
  margin: auto;
}

.fillBlockAbsolute {
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
}

.fillBlockFixed {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.aspectRatioImage {
  display: block;
  position: relative;
  padding-top: 75.18%;
  width: 100%;
  height: 0;
  overflow: hidden;
}

.aspectRatioImageWide {
  display: block;
  position: relative;
  padding-top: 50%;
  width: 100%;
  height: 0;
  overflow: hidden;
}

.aspectRatioImageSquare {
  display: block;
  position: relative;
  padding-top: 100%;
  width: 100%;
  height: 0;
  overflow: hidden;
}

.aspectRatioHightImage {
  display: block;
  position: relative;
  padding-top: 125%;
  width: 100%;
  height: 0;
  overflow: hidden;
}

.coverImage {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  font-family: 'object-fit: cover;';
}

.containImage {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  object-fit: contain;
  font-family: 'object-fit: contain';
}

/// Animate css properties
// usage
// scss - @include animate(color);
//     or @include animate(color width);
//     or @include animate(color width, 1s, linear);
//
$animation-speed: 0.3s !default;

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {
  $list: ();
  @each $prop in $properties {
    $str: #{$prop} #{$duration} #{$easing};
    $list: join($list, #{$str}, comma);
  }
  transition: $list;
}
